// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package idl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	Module               string   `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Observer             string   `protobuf:"bytes,2,opt,name=observer,proto3" json:"observer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_ca72272c16e1aadf, []int{0}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (dst *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(dst, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *RegisterRequest) GetObserver() string {
	if m != nil {
		return m.Observer
	}
	return ""
}

type RegisterReply struct {
	Handle               uint64   `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterReply) Reset()         { *m = RegisterReply{} }
func (m *RegisterReply) String() string { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()    {}
func (*RegisterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_ca72272c16e1aadf, []int{1}
}
func (m *RegisterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterReply.Unmarshal(m, b)
}
func (m *RegisterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterReply.Marshal(b, m, deterministic)
}
func (dst *RegisterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterReply.Merge(dst, src)
}
func (m *RegisterReply) XXX_Size() int {
	return xxx_messageInfo_RegisterReply.Size(m)
}
func (m *RegisterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterReply proto.InternalMessageInfo

func (m *RegisterReply) GetHandle() uint64 {
	if m != nil {
		return m.Handle
	}
	return 0
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "idl.RegisterRequest")
	proto.RegisterType((*RegisterReply)(nil), "idl.RegisterReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PanoramaServiceClient is the client API for PanoramaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PanoramaServiceClient interface {
	// Register a local observer to the health service.
	// Must be called before SubmitReport.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
}

type panoramaServiceClient struct {
	cc *grpc.ClientConn
}

func NewPanoramaServiceClient(cc *grpc.ClientConn) PanoramaServiceClient {
	return &panoramaServiceClient{cc}
}

func (c *panoramaServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/idl.PanoramaService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PanoramaServiceServer is the server API for PanoramaService service.
type PanoramaServiceServer interface {
	// Register a local observer to the health service.
	// Must be called before SubmitReport.
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
}

func RegisterPanoramaServiceServer(s *grpc.Server, srv PanoramaServiceServer) {
	s.RegisterService(&_PanoramaService_serviceDesc, srv)
}

func _PanoramaService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanoramaServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.PanoramaService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanoramaServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PanoramaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "idl.PanoramaService",
	HandlerType: (*PanoramaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _PanoramaService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_ca72272c16e1aadf) }

var fileDescriptor_service_ca72272c16e1aadf = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x5d, 0x95, 0x65, 0x1d, 0x5c, 0x16, 0x82, 0x48, 0xc9, 0x45, 0xe9, 0x45, 0x4f, 0x59,
	0x50, 0xf0, 0x03, 0x08, 0x1e, 0xbc, 0x49, 0xfc, 0x04, 0xa9, 0x19, 0x9b, 0x48, 0xb2, 0x13, 0xf3,
	0x47, 0xe8, 0xb7, 0x97, 0x36, 0xd5, 0x85, 0x1e, 0x7f, 0x6f, 0x66, 0xde, 0xbc, 0x07, 0xdb, 0x84,
	0xf1, 0xc7, 0x7e, 0xa0, 0x08, 0x91, 0x32, 0xb1, 0x33, 0xab, 0x1d, 0xbf, 0xe9, 0x89, 0x7a, 0x87,
	0xfb, 0x49, 0xea, 0xca, 0xe7, 0x3e, 0x5b, 0x8f, 0x29, 0x2b, 0x1f, 0xea, 0x16, 0xbf, 0x34, 0xa8,
	0x5c, 0x36, 0x95, 0xda, 0x17, 0xd8, 0x49, 0xec, 0x6d, 0xca, 0x18, 0x25, 0x7e, 0x17, 0x4c, 0x99,
	0x5d, 0xc3, 0xda, 0x93, 0x2e, 0x0e, 0x9b, 0xd5, 0xed, 0xea, 0xfe, 0x42, 0xce, 0xc4, 0x38, 0x6c,
	0xa8, 0x1b, 0x3f, 0x62, 0x6c, 0x4e, 0xa7, 0xc9, 0x3f, 0xb7, 0x77, 0xb0, 0x3d, 0xda, 0x04, 0x37,
	0x8c, 0x26, 0x46, 0x1d, 0xf4, 0x6c, 0x72, 0x2e, 0x67, 0x7a, 0x78, 0x85, 0xdd, 0x9b, 0x3a, 0x50,
	0x54, 0x5e, 0xbd, 0xd7, 0xf0, 0xec, 0x09, 0x36, 0x7f, 0xb7, 0xec, 0x4a, 0x58, 0xed, 0xc4, 0x22,
	0x11, 0x67, 0x0b, 0x35, 0xb8, 0xa1, 0x3d, 0x79, 0xe6, 0xd0, 0xa0, 0x2e, 0xe2, 0xcb, 0x14, 0x41,
	0x51, 0x63, 0x14, 0x1a, 0x31, 0xd4, 0x72, 0xdd, 0x7a, 0x6a, 0xf7, 0xf8, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x6a, 0xee, 0x63, 0x97, 0x22, 0x01, 0x00, 0x00,
}
